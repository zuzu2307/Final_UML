@startuml
left to right direction

class Authentication {
    -username: String
    -password: String
    -email: String
    +register(username: String, password: String, email: String): void
    +login(username: String, password: String): void
    +logout(): void
}

class User {
    -userID: String
    -username: String
    -email: String
    -password: String
    -loanID: String[]
    +searchBook(bookDetails: String): Book[]
    +getLoanList(): Loan[]
    +getRoomList(): AVRoom[]
    +borrowBooks(bookID: String[]): void
    +returnBooks(loanID: String): void
    +renewReturnDate(loanID: String): void
}

class UserManagement {
    -user: User[]
    +getUserData(userID: String[]): User[]
    +addUser(user: User): void
    +updateUser(user: User): void
    +deleteUser(userID: String): void
}

class Student {
    -studentID: String
    +reserveBook(bookID: String[]): void
    +reserveRoom(roomID: String[]): void
}

class Book {
    -bookID: String
    -title: String
    -author: String
    -genre: String
    -loanStatus: Boolean
    -reserveStatus: Boolean
}

class BookManagement {
    -book: Book[]
    +getBookData(bookDetails: String): Book[]
    +addBook(book: Book): void
    +updateBook(book: Book): void
    +deleteBook(bookID: String): void
}

class Loan {
    -loanID: String
    -userID: String
    -bookID: String[]
    -borrowDate: Date
    -dueDate: Date
    -returnDate: Date
    +createLoan(userID: String, bookID: String[]): void
    +renewLoan(): void
    +closeLoan(): void
}

class Administrator {
    -adminID: String
    +displayRegisteredUsers(): void
    +displayUsersWithBorrowedBooks(): void
}

class Reservation {
    -reservationID: String
    -studentID: String
    -itemID: String[]
    -reservationDate: Date
    -reservationType: String
    +createReservation(studentID: String, itemID: String[], reservationType: String): void
}

class AVRoom {
    -roomID: String
    -studentID: String
    -reserveStatus: Boolean
}

class RoomManagement {
    -room: AVRoom[]
    +getRoomData(): AVRoom[]
    +addRoom(room: Room): void
    +updateRoom(room: Room): void
    +deleteRoom(roomID: String): void
}


User -up-> Authentication: uses
User ---> BookManagement: queries
User --> RoomManagement: queries
User <|-right- Student
User "1" -- "\n0..*" Loan: creates
Student "1" -down- "0..*" Reservation: creates
Authentication --> UserManagement: uses
UserManagement -right-> User : "                     manages"
AVRoom "1" -right- "0..*" Reservation: "                              is reserved in"
BookManagement -down-> Book: "                        manages"
Book "1...5" -up- "\n0..*" Loan: is borrowed in
Book "                                  1...5" -up- "0..*" Reservation: is reserved in
Administrator -right-> UserManagement: "                   queries"
Administrator -up-> Authentication: uses
Administrator --> Loan : queries
Loan -up-> UserManagement: uses
Loan -right-> BookManagement: uses
RoomManagement -right-> AVRoom: "                     manages"
Reservation --> RoomManagement: uses
@enduml
